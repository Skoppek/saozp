config:
 target: 'http://localhost:2358'
 plugins:
  expect: {}
 phases:
  - name: warmup
    duration: 1000
    arrivalRate: 2
    maxVusers: 50
  # - name: testing_phase
  #   duration: 1800
  #   arrivalRate: 5
  # - name: submitting
  #   duration: 300
  #   arrivalRate: 2
 variables:
  count:
   - 50
 processor: '../functions.js'
scenarios:
 - flow:
    - function: 'generateTestCase'
    - post:
       url: '/submissions'
       headers:
        Content-Type: 'application/json'
       json:
        # UWAGA ustaw SIZE na odpowiednią na długość sortowanej tablicy
        source_code: |
         #include <stdio.h>
         #include <stdlib.h>
         #define SIZE 1000
         int c(const void *a, const void *b) {
             return (*(int*)a - *(int*)b);
         }
         int main() {
             int n[SIZE], i;

             for (i = 0; i < SIZE; i++) {
                 if (scanf("%d", &n[i]) != 1) {
                     fprintf(stderr, "Error.\n");
                     return 1;
                 }
             }
             qsort(n, SIZE, sizeof(int), c);
             for (i = 0; i < SIZE; i++) {
                 printf("%d ", n[i]);
             }
             printf("\n");
             return 0;
         }
        language_id: 50
        stdin: '{{input}}'
        expected_output: '{{expected_output}}'
       capture:
        json: '$.token'
        as: 'token'
    - loop:
       # Aby uniknąć zalania sprawdzeniami o status
       # dodano 1s przerwy reprezentującą akceptowalny dla użytkownika czas czekania
       - think: 1
       - get:
          url: '/submissions/{{ token }}'
          capture:
           - json: $.status.id
             as: statusId
           - json: $.stdout
             as: stdout
          expect:
           - equals:
              - '3'
              - '{{statusId}}'
      whileTrue: 'isNotDone'
    - function: 'logStatus'
