server {
    listen 5173;

    # Proxy for /api requests to the service on port 3000
    location /api {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,
            X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
            add_header 'Content-Type' 'application/json';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://backend:3000;  # Use the correct container name
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional: Remove /api prefix before forwarding
        rewrite ^/api(/.*)$ $1 break;
    }

    # Proxy all other requests to the service on port 80
    location / {
        proxy_pass http://frontend:80;  # Use the correct container name
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /judge {
        proxy_pass http://host.docker.internal:2358;  # Use the correct container name
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Optional: Remove /api prefix before forwarding
        rewrite ^/judge(/.*)$ $1 break;
    }

    location /proxy {
        return 200 'Proxy is working fine.';
        add_header Content-Type text/html;
    }
}